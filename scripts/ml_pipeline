import numpy as np
import pandas as pd
from sklearn.metrics import mean_squared_error,r2_score
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor, VotingRegressor, StackingRegressor
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LinearRegression, Lasso, Ridge, SGDRegressor
from sklearn.svm import SVR
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from xgboost import XGBRegressor
from sklearn.neural_network import MLPRegressor
import pickle
from data_pipeline import X_train_scaled, X_test_scaled, y_train, y_test, X_train


def main():
    """
    Performs model training.
    Output: The saved model
    """

    def model_pipeline (models, k):
        mean_score_list=[]
        model_list=[]
        for model in models:
            scores = cross_val_score(model,X_train_scaled,y_train,scoring="r2",cv=k)
            mean_score = np.mean(scores)
            mean_score_list.append(mean_score)
            model_list.append(model)
            print(f'Mean cross-validation r2 for {model} is {mean_score}')
        best_model=model_list[np.argmax(mean_score_list)]
        return print(f'The best model is {best_model}')


    #Checking baseline models for cross validation = 3
    k=3

    models = [LinearRegression(),
            Lasso(),
            Ridge(),
            SGDRegressor(),
            KNeighborsRegressor(),
            SVR(),
            DecisionTreeRegressor(),
            AdaBoostRegressor(),
            GradientBoostingRegressor(),
            RandomForestRegressor(),
            XGBRegressor()
            ]

    print(model_pipeline (models, k))

    

if __name__ == '__main__':
    main()